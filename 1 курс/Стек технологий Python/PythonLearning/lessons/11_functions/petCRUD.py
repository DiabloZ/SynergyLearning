# В Урок №10. Задание №1 вы создавали словарь с информацией о питомце. Теперь нам нужна "настоящая" база данных для ветеринарной клиники.
#
# Подробный требуемый функционал будет ниже. Пока что справка:
#
# Создайте функцию create
# Создайте функцию read
# Создайте функцию update
# Создайте функцию delete
# Используйте словарь pets, который будет предоставлен ниже, либо создайте свой аналогичный
# Функция create:
#
# Данная функция будет создавать новую запись с информацией о питомце и добавлять эту информацию в наш словарь pets
#
# Функция read
#
# Данная функция будет отображать информацию о запрашиваемом питомце в виде:
#
# Это желторотый питон по кличке "Каа". Возраст питомца: 19 лет. Имя владельца: Саша
#
# Функция update
#
# Данная функция будет обновлять информацию об указанном питомце
#
# Функция delete
#
# Данная функция будет удалять запись о существующем питомце
#
# Структруа результирующего словаря pets будет как и в Урок №10. Задание №1, но с небольшим видоизменением:
#
# Словарь pets
#
# pets = {
#
#     1:
#
#         {
#
#             "Мухтар": {
#
#                 "Вид питомца": "Собака",
#
#                 "Возраст питомца": 9,
#
#                 "Имя владельца": "Павел"
#
#             },
#
#         },
#
#     2:
#
#         {
#
#             "Каа": {
#
#                 "Вид питомца": "желторотый питон",
#
#                 "Возраст питомца": 19,
#
#                 "Имя владельца": "Саша"
#
#             },
#
#         },
#
#     # и так далее
#
# }
#
# Здесь, 1 и 2 - это идентификаторы наших питомцев. Это уникальные ключи, по которым мы сможем обращаться к нашим записям в "базе данных"
#
# Суть будущей программы будет заключаться в следующем:
#
# Программа будет работать с помощью цикла while с условием command != 'stop', то есть до тех пор, пока на предложение ввести команду, пользователь не введёт слово stop
# Перед взаимодействием с "базой данных" запрашивается одна из команд в качестве пользовательского ввода. Пусть это будет переменная command
# Функция create должна добавлять новую информацию таким образом, чтобы идентификатор увеличивался на единицу. Чтобы у вас
# была возможность получать последний ключ в словаре воспользуйтесь импортом модуля collections. В начале вашей программы пропишите
# строчку: import collection, а в функции create в первых строках пропишите следующий код:
#
# def create():
#     last = collections.deque(pets, maxlen=1)[0]
# last в данном случае и будет число последнего ключа (или в нашей логике - идентификатора записи). Именно его и необходимо
# будет увеличивать на единицу при добавлении следующей записи.
# Как вам уже известно - суть функций заключается в том, чтобы использовать один и тот же код в нескольких местах.
# В данной задаче вам предстоит получать информацию о питомце несколько раз. Чтобы не повторяться в коде, вам нужно создать такие функции
#
# get_pet(ID):
#
# def get_pet(ID):
#
#     # функция, с помощью которой вы получите информацию о питомце в виде словаря
#
#     # сделайте проверку, если питомца с таким ID нету в нашей "базе данных"
#
#     # верните в этом случае False
#
#     # а если питомец всё же есть в "базе данных" - верните информацию о нём
#
#     # выглядеть это может примерно так:
#
#     return pets[ID] if ID in pets.keys() else False
#
# get_suffix(age):
#
# def get_suffix(age):
#
#     # функция, с помощью которой можно получить суффикс
#
#     # 'год', 'года', 'лет'
#
#     # реализацию этой функции вам предстоит придумать самостоятельно
#
#     # функция будет возвращать соответствующую строку
#
#     return
#
# pets_list():
#
# def pets_list():
#
# # Эта функция будет создана для удобства отображения всего списка питомцев
#
# # Информацию по каждому питомцу можно вывести с помощью цикла for
#
# Обратите внимание, если ID не существует в словаре с питомцами - будет возникать ошибка. Вам можно от неё избавиться,
# если правильно составить проверочное условие. Здесь не потребуется использовать такие конструкции, как try, except, чтобы обработать возникшую ошибку

class Pet:
    def __init__(self, type: str, old: int, ownerName: str):
        self.type = type
        self.old = old
        self.ownerName = ownerName

    def __str__(self):
        return f'{self.type}, животному - {self.old} {get_suffix(self.old)} лет, владелец - {self.ownerName}'


def get_suffix(old):
    if old == 0 or old in range(5, 20):
        return "лет"
    else:
        oldStr: str = old.__str__()[-1]
        if oldStr == "1":
            return "год"
        elif oldStr == "2" or oldStr == "3" or oldStr == "4":
            return "года"
        elif oldStr == "5" or oldStr == "6" or oldStr == "7" or oldStr == "8" or oldStr == "9":
            return "лет"


def get_pet(ID: int):
    if mapPets.__contains__(ID):
        mapPets[ID]
    else:
        print("Питомца под таким ID нет.")
        False


def pets_list():
    lenPets = mapPets.keys()
    for k in lenPets:
        print_pet(k)


def print_pet(num: int):
    if mapPets.__contains__(num):
        key = list(mapPets.get(num).keys())[0]
        pet: Pet = mapPets.get(num).get(key)
        print("Питомец " + num.__str__() + ", " + pet.__str__())
    else:
        print("Питомца под таким ID нет.")
        False


def create():
    last = 0
    if(mapPets.__len__() != 0):
        last = max(mapPets.keys()) + 1
    name = input("Введите имя питомца - ")
    type = input("Введите вид питомца - ")
    old = int(input("Введите возраст питомца - "))
    ownerName = input("Имя хозяина питомца - ")
    newPet = Pet(type, old, ownerName)
    petMap = dict()
    petMap[name] = newPet
    mapPets[last] = petMap

def update(ID: int):
    name = input("Введите имя питомца - ")
    type = input("Введите вид питомца - ")
    old = int(input("Введите возраст питомца - "))
    ownerName = input("Имя хозяина питомца - ")
    newPet = Pet(type, old, ownerName)
    petMap = dict()
    petMap[name] = newPet
    mapPets[ID] = petMap


def delete(ID: int):
    if mapPets.__contains__(ID):
        mapPets.__delitem__(ID)
    else:
        print("Питомца под таким ID нет.")
        False


def help():
    print("В этой программе есть следуюище команды -")
    print("create - можете создать питомца")
    print("update - можете обновить питомца, если он есть в списке")
    print("delete - можете удалить питомца из списка")
    print("print - вывести конкретного питомца")
    print("print all - вывести список всех питомцев")
    print("stop - для остановки выполнения программы")


def startProgramm():
    print("Запущена программа \"Зоопарк\", ознакомиться с командами можно через команду help")
    isRunning: bool = True
    while isRunning:
        command = input("Введите команду - ").lower()
        if (command == "create"):
            create()
        elif (command == "update"):
            number = int(input("Введите номер питомца - "))
            update(number)
        elif (command == "delete"):
            number = int(input("Введите номер питомца - "))
            delete(number)
        elif (command == "print"):
            number = int(input("Введите номер питомца - "))
            print_pet(number)
        elif (command == "print all"):
            pets_list()
        elif (command == "help"):
            help()
        elif (command == "stop"):
            isRunning = False
        else:
            print("Такой команды нет, попробуйте ещё раз.")


mapPets: dict = dict()
startProgramm()
