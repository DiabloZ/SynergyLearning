# Ранее вы выполняли задание связанное с ветеринарной клиникой. В той задаче вам предстояло вывести информацию о питомце на экран. Сейчас вам необходимо создать словарь pets = {}
#
# Примерный вид будет следующим:
#
# pets = {
#
#     "Имя питомца": {
#
#         'Вид питомца': # придумайте каким образом сюда внести информацию,
#
#             'Возраст питомца': # придумайте каким образом сюда внести информацию,
#
# 'Имя владельца': # придумайте каким образом сюда внести информацию
#
# }
#
# }
#
# У вас должен получиться словарь, с ещё одним словарём внутри. То есть, есть словарь pets. Он в себе хранит ещё один словарь, который обозначается именем питомца. Имя питомца также нужно каким-то образом вносить туда.
#
# Задача не будет считаться выполненной, если вы заходите сразу внести информацию, не прибегая в функции input()
#
# Например:
#
# pets = {
#
#     "Мухтар": {
#
#         "Вид питомца": "Собака",
#
#         "Возраст питомца": 9,
#
#         "Имя владельца": "Павел"
#
#     }
#
# }
#
# Так должен будет выглядеть результируюший словарь, но первоначальный его вид - пустой. Его необходимо заполнить пользовательским вводом через консоль с помощью функции input(), а не вписать значения уже в самом коде.
#
# Возраст питомца должен быть типа int Всё остальное - строки
#
# Так как возраст питомца указывается типом int. Необходимо, в соответствии с указанным возрастом выводит год, года или лет. Например:
#
# Его возраст: 24 года
#
# Его возраст: 21 год
#
# Его возраст: 19 лет
#
# И теперь осталось только получить всю информацию о питомце в виде строки, как из задания по Урок №3. Ввод-вывод и базовые переменные. Задание №1, но с небольшими изменениями. Для получения информации необходимо воспользоваться методами словаря keys() и values():
#
# Это желторотый питон по кличке "Каа". Возраст питомца: 19 лет. Имя владельца: Саша

class Pet:
    def __init__(self, type: str, old: int, ownerName: str):
        self.type = type
        self.old = old
        self.ownerName = ownerName

    def __str__(self):
        return f'{self.type}, животному - {self.old} {getOldString(self.old)} лет, владелец - {self.ownerName}'


def fillMaps():
    isAdding = True
    while isAdding:
        print("Пока введено питомцев - " + len(mapPets).__str__())
        answer = input("Хотите ввести ещё?" + "\nВведите ответ - ").lower()
        if (answer == "да"):
            name = input("Введите имя питомца - ")
            type = input("Введите вид питомца - ")
            old = int(input("Введите возраст питомца - "))
            ownerName = input("Имя хозяина питомца - ")
            newPet = Pet(type, old, ownerName)
            mapPets[name] = newPet
        elif (answer == "нет"):
            print("Заканчиваем процесс ввода питомцев")
            isAdding = False
        else:
            print("Введён некорректный ответ, можно только да или нет")


def outputPets():
    lenPets = mapPets.keys()
    for k in lenPets:
        pet: Pet = mapPets.get(k)
        print("Питомец " + k + ", " + pet.__str__())


def getOldString(old: int):
    if old == 0 or old in range(5, 20):
        return "лет"
    else:
        oldStr: str = old.__str__()[-1]
        if oldStr == "1":
            return "год"
        elif oldStr == "2" or oldStr == "3" or oldStr == "4":
            return "года"
        elif oldStr == "5" or oldStr == "6" or oldStr == "7" or oldStr == "8" or oldStr == "9":
            return "лет"


mapPets: dict = dict()
print("Начата работа программы, сейчас вы введёте своих питомцев, а потом мы выведем их ")
fillMaps()
outputPets()
